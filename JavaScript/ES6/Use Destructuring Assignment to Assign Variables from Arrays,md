ES6 makes destructuring arrays as easy as destructuring objects.

One key difference between the spread operator and array 
destructuring is that the spread operator unpacks all contents of an 
array into a comma-separated list. Consequently, you cannot pick or 
choose which elements you want to assign to variables.

Destructuring an array lets us do exactly that:

```jsx
const [a, b] = [1, 2, 3, 4, 5, 6];
console.log(a, b);
```

The console will display the values of `a` and `b` as `1, 2`.

The variable `a` is assigned the first value of the array, and `b`
 is assigned the second value of the array. We can also access the value
 at any index in an array with destructuring by using commas to reach 
the desired index:

```jsx
const [a, b,,, c] = [1, 2, 3, 4, 5, 6];
console.log(a, b, c);
```

The console will display the values of `a`, `b`, and `c` as `1, 2, 5`.

---

Use destructuring assignment to swap the values of `a` and `b` so that `a` receives the value stored in `b`, and `b` receives the value stored in `a`.

---

```jsx
const [a,b] = [1,2,3,4,5,6,7];
const [a,,b,,c] = [1,2,4,5,2,3,5,6,2844,43,6]
const [a, b,index->1,index->2, c] = [1, 2, 3, 4, 5, 6];
console.log(a, b, c);
------------------
// Swap
let a = 8, b = 6;
[a,b] = [b,a];
// Only change code below this line

```